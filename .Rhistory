search()
make.power <- function(n) {
pow <- function(x) {
x^n
}
pow
}
cube <- make.power(3)
cube(5)
?cube
??cube
cube
)
cube
make.power
square <- make.power(2)
ls(environment(cube))
ls(environment(make.power))
y <-10
testfunc1 <- function(x) x*x
testfunc2 <- function(x) x*x*x
testlist <- list(func1 = testfunc1, func2= testfunc2)
testlist
testlist$func1(3)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list (set = set, get = get, setmean = setmean, getmean = getmean)
}
x
testvector <- makeVector(x)
testvector
?`<--`
?`<<-`
matrix1 <- <- matrix(c(1,0,5,2,1,6,3,4,0),nrow = 3,ncol = 3)
matrix1 <- matrix(c(1,0,5,2,1,6,3,4,0),nrow = 3,ncol = 3)
matrix1
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInv <- function(inverse) inv <<- inverse
getInv <- function() inv
list (set = set, get = get, setInv = setInv, getInv = getInv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setInv(inv)
inv
}
matrix1x <- makeCacheMatrix(matrix1)
matrix1x$get()
matrix1x$getInv()
cacheSolve(matrix1x)
matrix1x$getInv()
class(matrix1x$get())
class(matrix1x$getInv())
